import { GetMessagesResponse } from "@/types";
import { doGet, doPost } from "@/utils/httpClient";
import { useEffect, useRef, useState } from "react";
import { getUserID } from "zmp-sdk";
import { Header, Icon } from "zmp-ui";
import base from "../../static/base.png";
import chevronRight from "../../static/chevron-right.svg";
import star from "../../static/star.svg";
import TypingDots from "./TypingDots";
const SuggestPrompts = [
  "üí° ƒê·ª©ng th·∫≥ng ‚Üí t·ª± tin 200%.",
  "üí° 7 gi√¢y: th·ªùi gian t·∫°o ·∫•n t∆∞·ª£ng ƒë·∫ßu.",
  "üí° H·ªèi m·ªü ‚Üí D·ªÖ b·∫Øt chuy·ªán h∆°n 80%",
  "üí° Ghi ch√∫ tay ‚Üí Nh·ªõ l√¢u g·∫•p 2 l·∫ßn.",
  "üí° Trang ph·ª•c g·ªçn g√†ng ‚Üí Tr√¥ng chuy√™n nghi·ªáp h∆°n 150%.",
  "üí° Th√°i ƒë·ªô > K·ªπ nƒÉng trong tu·∫ßn ƒë·∫ßu.",
  "üí° Giao ti·∫øp m·∫Øt ‚Üí T·∫°o c·∫£m gi√°c tin c·∫≠y h∆°n.",
  "üí° T·ªõi s·ªõm 10 ph√∫t ‚Üí Lu√¥n l√† ng∆∞·ªùi ch·ªß ƒë·ªông.",
  "üí° Gi·ªØ th√°i ƒë·ªô t√≠ch c·ª±c ‚Üí Gi·∫£i quy·∫øt t√¨nh hu·ªëng t·ªët h∆°n.",
  "üí° ƒê·ª´ng s·ª£ kh√¥ng bi·∫øt ‚Üí H·ªèi ƒë√∫ng m·ªõi l√† gi·ªèi.",
];

type Message = {
  id: string | number;
  type: "user" | "bot";
  text: string;
};

function getRandomElements(arr: any[], n: number) {
  if (n > arr.length) {
    throw new RangeError(
      "Cannot get more elements than available in the array."
    );
  }

  // Create a shallow copy to avoid modifying the original array
  const shuffled = [...arr];

  // Fisher-Yates (Knuth) shuffle algorithm
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]; // Swap elements
  }

  // Return the first 'n' elements from the shuffled array
  return shuffled.slice(0, n);
}

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [input, setInput] = useState("");
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [isInputFocused, setIsInputFocused] = useState(false);
  const userId = useRef<string>("");
  const fetchTimeoutRef = useRef<any>(null);

  useEffect(() => {
    (window as any).fakeBotMessage = (text: string) => {
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now().toString(),
          type: "bot",
          text,
        },
      ]);
    };
  }, []);

  let amount = 0;

  useEffect(() => {
    const fetchLoop = async () => {
      if (amount > 3) {
        clearTimeout(fetchTimeoutRef.current);
        return;
      }
      amount++;
      await fetchMessages();
      fetchTimeoutRef.current = setTimeout(fetchLoop, 1000);
    };
    getUserID().then((id) => {
      console.log("User ID:", id);
      userId.current = (id as any) || 1;
      fetchLoop();
    });

    return () => {
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
      }
    };
  }, []);

  const getWelcomeMoment = () => {
    const now = new Date();
    const hours = now.getHours();
    if (hours < 11) return "Ch√†o bu·ªïi s√°ng";
    if (hours < 13) return "Ch√†o bu·ªïi tr∆∞a";
    if (hours < 18) return "Ch√†o bu·ªïi chi·ªÅu";
    return "Ch√†o bu·ªïi t·ªëi";
  };

  const send = (msg: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      text: msg,
    };

    const botDummyMessage: Message = {
      id: "",
      text: "",
      type: "bot",
    };
    setMessages((messages) => [botDummyMessage, newMessage, ...messages]);
    setInput("");
    setShowSuggestions(false);

    setIsTyping(true);
    doPost("https://zah-7.123c.vn/api/v1/messages", {
      senderId: userId.current,
      content: msg,
    }).then((resp) => {
      console.log("resp message", resp);
      const { id, content } = resp.data;
      const newMes: Message = {
        id,
        text: content,
        type: "bot",
      };

      setMessages((messages) => {
        Object.assign(messages[0], newMes);
        return [...messages];
      });
      setIsTyping(false);
    });
  };

  const sendMessage = () => {
    const trimmed = input.trim();
    if (!trimmed) return;

    send(trimmed);
  };

  const handleSuggestionClick = (text: string) => {
    setShowSuggestions(false);
    send(text);
  };

  const fetchMessages = async () => {
    try {
      const { err, data }: { err: any; data: GetMessagesResponse } =
        await doGet(
          `https://zah-7.123c.vn/api/v1/messages?userId=${userId.current}&limit=10&after=`
        );

      console.log("err", err);
      if (err) {
        console.error("Failed to fetch messages:", err);
        return;
      }

      const newMessages: Message[] = data.messages.map((msg) => ({
        id: msg.id,
        type: msg.senderId === "zellobuddy" ? "bot" : "user",
        text: msg.content,
      }));
      setMessages(newMessages);
    } catch (error) {
      console.error("Failed to fetch messages:", error);
    }
  };

  return (
    <>
      <div className="w-full overflow-hidden bg-[#EFF6FF] h-full flex flex-col justify-between max-w-md mx-auto text-sm font-sans overscroll-none">
        {/* Header */}

        <Header
          title={
            <div className="h-[48px] flex flex-col  justify-center">
              <div className="leading-none">Tr·ª£ th·ªß AI - Zello</div>
              <div className="text-[12px] text-[#6F7071] font-normal">
                Tr·ª£ th·ªß AI c√° nh√¢n c·ªßa b·∫°n
              </div>
            </div>
          }
          onBackClick={() => {
            window.history.back();
          }}
        />
        {/* Chat messages */}
        <div className="flex-1 overflow-y-auto">
          <div className="flex-1 flex flex-col-reverse h-full p-4 overflow-y-auto whitespace-pre-line">
            {[...messages].map((msg, i, arr) => {
              const prev = arr[i + 1];
              const isSameSender = prev?.type === msg.type;
              const spacingClass = isSameSender ? "mt-1" : "mt-4";

              const isBot = msg.type === "bot";
              const showAvatar = isBot && !isSameSender;

              return (
                <div
                  key={msg.id}
                  className={`flex items-start ${spacingClass}`}
                >
                  {isBot && (
                    <div className="w-8 mr-2 flex justify-center">
                      {showAvatar && (
                        <img src={base} alt="Smiley" className="" />
                      )}
                    </div>
                  )}
                  <div
                    className={`p-3 rounded-xl shadow-sm max-w-[80%] ${
                      msg.type === "user"
                        ? "ml-auto bg-blue-500 text-white"
                        : "bg-[#F8F9FB] text-gray-800"
                    }`}
                  >
                    {isBot && msg.text.length === 0 ? <TypingDots /> : msg.text}
                    {/* {<TypingDots />} */}
                  </div>
                </div>
              );
            })}
            <div className={`flex items-start`}>
              <div className="w-8 mr-2 flex justify-center">
                <img src={base} alt="Smiley" className="" />
              </div>
              <div
                className={`p-3 rounded-xl shadow-sm max-w-[80%] bg-white text-gray-800"
        `}
              >
                <p className="m-0 font-medium text-base mb-1">
                  üëã {getWelcomeMoment()}, Nguy·ªÖn VƒÉn A2
                </p>
                <p>
                  ‚ÄúM√°ch nh·ªè b·∫°n: H√£y l√† ch√≠nh m√¨nh. Ch·ªâ c·∫ßn l·ªãch s·ª±, l·∫Øng nghe
                  v√† t√≤ m√≤ ‚Äì l√† ·ªïn r·ªìi.‚Äù
                </p>
                <div className="flex flex-col items-start gap-2 mt-3">
                  {getRandomElements(SuggestPrompts, 3).map((prompt, idx) => (
                    <div
                      className="bg-[#F0F7FF] text-[#0068FF] px-3 py-2 gap-1.5 rounded-xl text-sm font-normal flex w-full active:brightness-95 transition-all cursor-pointer"
                      key={idx}
                    >
                      <p className="m-0">{prompt}</p>
                      <img src={chevronRight} alt="" className="ml-auto" />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Suggestion row */}
        {showSuggestions && (
          <div className="px-4 py-4 flex-none">
            <div className="text-[#0D0D0D] mb-2 font-medium">
              G·ª£i √Ω Zello d√†nh cho b·∫°n
            </div>
            <div className="flex gap-2 overflow-x-auto scrollbar-hide">
              {[
                "3 c√°ch gi·ªõi thi·ªáu b·∫£n th√¢n kh√¥ng b·ªã ng·∫°i",
                "3 ƒëi·ªÅu n√™n l√†m trong ng√†y ƒë·∫ßu ti√™n",
                "C√°ch b·∫Øt chuy·ªán khi b·∫°n kh√¥ng quen ai",
                "Intro th·∫ø n√†o ƒë·ªÉ g√¢y thi·ªán c·∫£m?",
                "N√™n h·ªèi g√¨ trong bu·ªïi ƒÉn tr∆∞a ƒë·∫ßu ti√™n?",
                "Trang ph·ª•c ng√†y ƒë·∫ßu ‚Äì sao cho chu·∫©n?",
                "G·∫∑p s·∫øp l·∫ßn ƒë·∫ßu ‚Üí N√™n n√≥i g√¨?",
                "L√†m sao ƒë·ªÉ ƒë·ª° ‚Äúl·∫°c l√µng‚Äù khi ch∆∞a th√¢n ai?",
                "T·∫°o thi·ªán c·∫£m m√† kh√¥ng c·∫ßn g·ªìng th·∫ø n√†o?",
                "3 c√°ch ghi ch√∫ gi√∫p b·∫°n h·ªçc vi·ªác nhanh h∆°n",
              ].map((text, idx) => (
                <button
                  key={idx}
                  className="flex flex-col items-start gap-[6px] w-[154px] text-[#3D3D3D] text-start flex-shrink-0 px-3 py-[12px] bg-white text-blue-600 rounded-xl border text-sm"
                  onClick={() => handleSuggestionClick(text)}
                >
                  <img src={star} alt="" className="" />
                  {text}
                </button>
              ))}
            </div>
          </div>
        )}
        {/* Input field */}
        <div
          className="py-[12px] px-[16px] bg-white flex items-center gap-2 flex-none"
          style={{
            paddingBottom: isInputFocused
              ? "16px"
              : "calc(16px + var(--zaui-safe-area-inset-bottom, 0px))",
          }}
        >
          <input
            id="input-text"
            type="text"
            onFocus={() => setIsInputFocused(true)}
            onBlurCapture={() => {
              setTimeout(() => {
                setIsInputFocused(false);
              }, 100);
            }}
            placeholder="Nh·∫≠p n·ªôi dung..."
            className="flex-1 focus:outline-none"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && sendMessage()}
          />
          <button onClick={sendMessage} className="text-blue-500 pl-2">
            <Icon icon="zi-send-solid" />
          </button>
        </div>
      </div>
    </>
  );
}
